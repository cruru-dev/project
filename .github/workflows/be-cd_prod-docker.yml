name: BE/CD - [PROD] Build & Deploy

on:
  workflow_dispatch:
    inputs:
      release-ver:
        description: 'Release version tag (ex. v0.0.1)'
        required: true
      rollback-ver:
        description: 'Rollback version tag (ex. v0.0.0)'
        required: true

jobs:
  build:
    environment: prod
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set timezone to Korea
      uses: szenius/set-timezone@v2.0
      with:
        timezoneLinux: "Asia/Seoul"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
          cache-write-only: true

    - name: Build with Gradle
      run: ./gradlew bootJar

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Image build and push
      run: |
        docker build --build-arg PROFILE=prod -t ${{ secrets.DOCKER_REPO_NAME }}/cruru:${{ inputs.release-ver }} --platform linux/arm64 .
        docker push ${{ secrets.DOCKER_REPO_NAME }}/cruru:${{ inputs.release-ver }}

    - name: Upload docker-compose yaml script to artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose
        path: |
          ${{ github.workspace }}/backend/docker-compose.prod.yml
          ${{ github.workspace }}/backend/promtail-config.yml

  deploy:
    environment: prod
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        runners: [be-prod-a, be-prod-b]
      
    runs-on: [self-hosted, '${{ matrix.runners }}']
    needs: build
    defaults:
      run:
        working-directory: backend
    steps:
    - name: Set docker-compose YAML script to runner
      uses: actions/download-artifact@v4
      with:
        name: docker-compose
        path: ${{ github.workspace }}/backend

    - name: Extract secrets as .env file
      run: |
        cat <<EOF > .env
        # Docker Hub info from Github Secrets
        DOCKER_REPO_NAME=${{ secrets.DOCKER_REPO_NAME }}
        DOCKER_IMAGE_VERSION_TAG=${{ inputs.release-ver }}
        
        # DB Configuration secrets info from Github Secrets
        DB_PORT=${{ secrets.DB_PORT }}
        DB_IP_ADDRESS=${{ secrets.DB_IP_ADDRESS }}
        READ_DB_URL=${{ secrets.READ_DB_URL }}
        WRITE_DB_URL=${{ secrets.WRITE_DB_URL }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DDL_AUTO=${{ secrets.DDL_AUTO }}

        # DB server configuration secrets info from Github Secrets
        APP_IP_ADDRESS=${{ secrets.APP_IP_ADDRESS }}
        SERVER_BINDING_PORT=${{ secrets.SERVER_BINDING_PORT }}
        SERVER_PORT=${{ secrets.SERVER_PORT }}
        SUBNET=${{ secrets.SUBNET }}
        
        # Monitoring configuration server info from Github secrets
        MONITORING_INSTANCE_ADDR_LOKI_PORT=${{ secrets.MONITORING_INSTANCE_ADDR_LOKI_PORT }}
        MONITORING_BINDING_PORT=${{ secrets.MONITORING_BINDING_PORT }}
        MONITORING_PORT=${{ secrets.MONITORING_PORT }}
        MONITORING_BASE_PATH=${{ secrets.MONITORING_BASE_PATH }}
        MONITORING_PROFILE=${{ secrets.MONITORING_PROFILE }}
        
        # Apply configuration server info from Github secrets
        APPLY_POST_BASE_URL=${{ secrets.APPLY_POST_BASE_URL }}

        # Email Auth info
        EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        
        # Security settings
        JWT_TOKEN_SECRET_KEY=${{ secrets.JWT_TOKEN_SECRET_KEY }}
        JWT_TOKEN_EXPIRE_CYCLE=${{ secrets.JWT_TOKEN_EXPIRE_CYCLE }}
        JWT_SIGN_ALGORITHM=${{ secrets.JWT_SIGN_ALGORITHM }}
        
        # Cookie settings
        COOKIE_ACCESS_TOKEN_KEY=${{ secrets.COOKIE_ACCESS_TOKEN_KEY }}
        COOKIE_HTTP_ONLY=${{ secrets.COOKIE_HTTP_ONLY }}
        COOKIE_SECURE=${{ secrets.COOKIE_SECURE }}
        COOKIE_DOMAIN=${{ secrets.COOKIE_DOMAIN }}
        COOKIE_PATH=${{ secrets.COOKIE_PATH }}
        COOKIE_SAME_SITE=${{ secrets.COOKIE_SAME_SITE }}
        COOKIE_MAX_AGE=${{ secrets.COOKIE_MAX_AGE }}        
        EOF

    - name: Stop and remove existing containers
      run: |
        sudo docker-compose -f docker-compose.prod.yml down --rmi all

    - name: Deploy docker container
      run: |
        sudo docker-compose --env-file .env -f docker-compose.prod.yml up -d

    - name: Run server status check script with timeout
      run: ../check_server_status_with_timeout.sh

  roll-back-on-fail:
    environment: prod
    strategy:
      matrix:
        runners: [be-prod-a, be-prod-b]

    runs-on: [self-hosted, '${{ matrix.runners }}']
    needs: deploy
    if: failure()

    defaults:
      run:
        working-directory: backend
    steps:
      - name: Extract secrets as .env file
        run: |
          cat <<EOF > .env
          # Docker Hub info from Github Secrets
          DOCKER_REPO_NAME=${{ secrets.DOCKER_REPO_NAME }}
          DOCKER_IMAGE_VERSION_TAG=${{ inputs.rollback-ver }}
          
          # DB Configuration secrets info from Github Secrets
          DB_PORT=${{ secrets.DB_PORT }}
          DB_IP_ADDRESS=${{ secrets.DB_IP_ADDRESS }}
          READ_DB_URL=${{ secrets.READ_DB_URL }}
          WRITE_DB_URL=${{ secrets.WRITE_DB_URL }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DDL_AUTO=${{ secrets.DDL_AUTO }}
          
          # DB server configuration secrets info from Github Secrets
          APP_IP_ADDRESS=${{ secrets.APP_IP_ADDRESS }}
          SERVER_BINDING_PORT=${{ secrets.SERVER_BINDING_PORT }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          SUBNET=${{ secrets.SUBNET }}
          
          # Monitoring configuration server info from Github secrets
          MONITORING_INSTANCE_ADDR_LOKI_PORT=${{ secrets.MONITORING_INSTANCE_ADDR_LOKI_PORT }}
          MONITORING_BINDING_PORT=${{ secrets.MONITORING_BINDING_PORT }}
          MONITORING_PORT=${{ secrets.MONITORING_PORT }}
          MONITORING_BASE_PATH=${{ secrets.MONITORING_BASE_PATH }}
          MONITORING_PROFILE=${{ secrets.MONITORING_PROFILE }}
          
          # Apply configuration server info from Github secrets
          APPLY_POST_BASE_URL=${{ secrets.APPLY_POST_BASE_URL }}
          
          # Email Auth info
          EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          
          # Security settings
          JWT_TOKEN_SECRET_KEY=${{ secrets.JWT_TOKEN_SECRET_KEY }}
          JWT_TOKEN_EXPIRE_CYCLE=${{ secrets.JWT_TOKEN_EXPIRE_CYCLE }}
          JWT_SIGN_ALGORITHM=${{ secrets.JWT_SIGN_ALGORITHM }}
          
          # Cookie settings
          COOKIE_ACCESS_TOKEN_KEY=${{ secrets.COOKIE_ACCESS_TOKEN_KEY }}
          COOKIE_HTTP_ONLY=${{ secrets.COOKIE_HTTP_ONLY }}
          COOKIE_SECURE=${{ secrets.COOKIE_SECURE }}
          COOKIE_DOMAIN=${{ secrets.COOKIE_DOMAIN }}
          COOKIE_PATH=${{ secrets.COOKIE_PATH }}
          COOKIE_SAME_SITE=${{ secrets.COOKIE_SAME_SITE }}
          COOKIE_MAX_AGE=${{ secrets.COOKIE_MAX_AGE }}        
          EOF

      - name: Stop and remove existing containers
        run: |
          sudo docker-compose -f docker-compose.prod.yml down --rmi all

      - name: Deploy docker container
        run: |
          sudo docker-compose --env-file .env -f docker-compose.prod.yml up -d

      - name: Run server status check script with timeout
        run: ../check_server_status_with_timeout.sh
